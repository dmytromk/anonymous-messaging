spring.application.name=messenger
spring.datasource.url=${DATASOURCE_URL}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.username=${DATASOURCE_USERNAME}
spring.datasource.password=${DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.show-sql=true
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.hibernate.ddl-auto=validate

app.secret=${APP_SECRET}

# spring.security.oauth2.client.registration.google.clientId=${GOOGLE_CLIENT_ID}
# spring.security.oauth2.client.registration.google.clientSecret=${GOOGLE_CLIENT_SECRET}
# spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google

# spring.security.oauth2.client.registration.keycloak.client-id=anonmes
# spring.security.oauth2.client.registration.keycloak.client-secret=4v5LtHS35A36f3XtW1Kvxiu7jGDuWdVE
# spring.security.oauth2.client.registration.keycloak.scope=openid, profile, roles
# spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
# spring.security.oauth2.client.registration.keycloak.redirect-uri=https://localhost:8080/login/oauth2/login/anonmes

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8888/realms/anonmes
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

token.converter.principal-attribute=preferred_username
token.converter.resource-id=anonmes

springdoc.swagger-ui.path=/api-docs.html
springdoc.swagger-ui.operationsSorter=method
